The distinction of our database is that the data values are of a particular type,
SimpleDataTypeImpl, which provide support for disk persistence.  Otherwise, they
are treated just like any ordinary data and can be arranged in any collection
shape you could wish - trees, lists, whatever.

Thus, the performance test is just a matter of determining how quickly we
are able to build these objects.

There is a second piece to the process, where the data is sent off to an
ActionQueue to be written to disk,

/*
 * In this test, we'll turn off disk-syncing.
 *
 * For the record... running this takes between 80 and 120 milliseconds.
 */
logger.test("Just how fast is our minum.database? spoiler: about 10 updates in 1 nanosecond");{
    final var foos = range(1,10).mapToObj(x -> new Foo(x, x, "abc"+x)).toList();

    // change the foos
    final var timer = new StopWatch().startTimer();
    for (var i = 1; i < 100_000; i++) {
        final var newFoos = new ArrayList<Foo>();
        for (var foo : foos) {
            final var newFoo = new Foo(foo.index, foo.a + 1, foo.b + "_updated");
            newFoos.add(newFoo);
        }
    }
    final var time = timer.stopTimer();
}

Performance measurements:

2023-04-27	108
2023-04-27	94
2023-04-27	109
2023-04-27	94
2023-04-27	94
2023-04-27	94
2023-04-27	94
2023-04-27	102
2023-04-27	94
2023-04-27	94
2023-04-27	110
2023-04-27	94
2023-05-29	78
2023-05-29	94
2023-05-29	95
2023-05-29	78
2023-05-29	94
2023-05-29	98
2023-05-29	125
2023-05-29	78
2023-05-29	96
2023-05-29	78
2023-05-29	147
2023-05-29	94
2023-05-29	101
2023-05-29	96
2023-05-29	85
2023-05-29	93
2023-05-29	104
2023-05-29	103
2023-05-29	94
2023-05-29	85
2023-05-29	94
2023-05-29	78
2023-05-31	105
2023-05-31	98
2023-05-31	119
2023-05-31	104
2023-06-01	104
2023-06-01	90
2023-06-01	103
2023-06-01	90
2023-06-01	91
2023-06-01	91
2023-06-01	135
2023-06-01	95
2023-06-01	93
2023-06-01	93
2023-06-01	94
